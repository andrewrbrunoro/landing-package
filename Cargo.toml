[package]
name = "landing"
description = "Essa biblioteca Ã© de uso para venda de planos"
version = "0.1.0"
authors = ["Andrew R Brunoro <andrewrbrunoro@gmail.com>"]
edition = "2018"
license = "ICS"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["wee_alloc", "console_error_panic_hook"]

[dependencies]
futures = { version = "0.1.20", features = ["use_std"] }
wasm-bindgen = { version = "0.2.45", features = ["serde-serialize"]  }
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"
serde = { version = "1.0.80", features = ["derive"] }
serde_derive = "^1.0.59"
serde_json = "1"
web-sys = { version = "0.3.4", features = ["Headers", "Request", "RequestInit", "RequestMode", "Response", "Window", "Document", "Element", "Node", "HtmlElement", "console"] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.2"

[profile.release]
lto = true
# Tell `rustc` to optimize for small code size.
# opt-level = "s"
